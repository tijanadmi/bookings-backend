// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: restriction.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRestriction = `-- name: CreateRestriction :one
INSERT INTO restrictions (
	restriction_name_sr,
	restriction_name_en,
	restriction_name_bg
) VALUES (
  $1, $2, $3
) RETURNING id, restriction_name_sr, restriction_name_en, restriction_name_bg, created_at, updated_at
`

type CreateRestrictionParams struct {
	RestrictionNameSr string `json:"restriction_name_sr"`
	RestrictionNameEn string `json:"restriction_name_en"`
	RestrictionNameBg string `json:"restriction_name_bg"`
}

func (q *Queries) CreateRestriction(ctx context.Context, arg CreateRestrictionParams) (Restriction, error) {
	row := q.db.QueryRow(ctx, createRestriction, arg.RestrictionNameSr, arg.RestrictionNameEn, arg.RestrictionNameBg)
	var i Restriction
	err := row.Scan(
		&i.ID,
		&i.RestrictionNameSr,
		&i.RestrictionNameEn,
		&i.RestrictionNameBg,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRestriction = `-- name: DeleteRestriction :exec
DELETE FROM restrictions
WHERE id = $1
`

func (q *Queries) DeleteRestriction(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRestriction, id)
	return err
}

const getRestriction = `-- name: GetRestriction :one
SELECT id, restriction_name_sr, restriction_name_en, restriction_name_bg, created_at, updated_at FROM restrictions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRestriction(ctx context.Context, id int32) (Restriction, error) {
	row := q.db.QueryRow(ctx, getRestriction, id)
	var i Restriction
	err := row.Scan(
		&i.ID,
		&i.RestrictionNameSr,
		&i.RestrictionNameEn,
		&i.RestrictionNameBg,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRestrictionForUpdate = `-- name: GetRestrictionForUpdate :one
SELECT id, restriction_name_sr, restriction_name_en, restriction_name_bg, created_at, updated_at FROM restrictions
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetRestrictionForUpdate(ctx context.Context, id int32) (Restriction, error) {
	row := q.db.QueryRow(ctx, getRestrictionForUpdate, id)
	var i Restriction
	err := row.Scan(
		&i.ID,
		&i.RestrictionNameSr,
		&i.RestrictionNameEn,
		&i.RestrictionNameBg,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listRestrictions = `-- name: ListRestrictions :many
SELECT id, restriction_name_sr, restriction_name_en, restriction_name_bg, created_at, updated_at FROM restrictions
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListRestrictionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRestrictions(ctx context.Context, arg ListRestrictionsParams) ([]Restriction, error) {
	rows, err := q.db.Query(ctx, listRestrictions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Restriction{}
	for rows.Next() {
		var i Restriction
		if err := rows.Scan(
			&i.ID,
			&i.RestrictionNameSr,
			&i.RestrictionNameEn,
			&i.RestrictionNameBg,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRestriction = `-- name: UpdateRestriction :one
UPDATE restrictions
SET
  updated_at = COALESCE($1, updated_at),
  restriction_name_sr = COALESCE($2, restriction_name_sr),
  restriction_name_en = COALESCE($3, restriction_name_en),
  restriction_name_bg = COALESCE($4, restriction_name_bg)
WHERE
id = $5
RETURNING id, restriction_name_sr, restriction_name_en, restriction_name_bg, created_at, updated_at
`

type UpdateRestrictionParams struct {
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
	RestrictionNameSr pgtype.Text        `json:"restriction_name_sr"`
	RestrictionNameEn pgtype.Text        `json:"restriction_name_en"`
	RestrictionNameBg pgtype.Text        `json:"restriction_name_bg"`
	ID                int32              `json:"id"`
}

func (q *Queries) UpdateRestriction(ctx context.Context, arg UpdateRestrictionParams) (Restriction, error) {
	row := q.db.QueryRow(ctx, updateRestriction,
		arg.UpdatedAt,
		arg.RestrictionNameSr,
		arg.RestrictionNameEn,
		arg.RestrictionNameBg,
		arg.ID,
	)
	var i Restriction
	err := row.Scan(
		&i.ID,
		&i.RestrictionNameSr,
		&i.RestrictionNameEn,
		&i.RestrictionNameBg,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
